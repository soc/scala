package scala.reflect.naming;

public final class ScalaTokenCodes {
  public static final int EMPTY = -3;
  public static final int UNDEF = -2;
  public static final int ERROR = -1;

  public static final int EOF              = 0;
  public static final int CHARLIT          = 1;
  public static final int INTLIT           = 2;
  public static final int LONGLIT          = 3;
  public static final int FLOATLIT         = 4;
  public static final int DOUBLELIT        = 5;
  public static final int STRINGLIT        = 6;
  public static final int STRINGPART       = 7;
  public static final int SYMBOLLIT        = 8;
  public static final int INTERPOLATIONID  = 9;
  public static final int IDENTIFIER       = 10;
  public static final int BACKQUOTED_IDENT = 11;
  public static final int IF               = 20;
  public static final int FOR              = 21;
  public static final int ELSE             = 22;
  public static final int THIS             = 23;
  public static final int NULL             = 24;
  public static final int NEW              = 25;
  public static final int WITH             = 26;
  public static final int SUPER            = 27;
  public static final int CASE             = 28;
  public static final int CASECLASS        = 29;
  public static final int CASEOBJECT       = 30;
  public static final int VAL              = 31;
  public static final int ABSTRACT         = 32;
  public static final int FINAL            = 33;
  public static final int PRIVATE          = 34;
  public static final int PROTECTED        = 35;
  public static final int OVERRIDE         = 36;
  public static final int IMPLICIT         = 37;
  public static final int VAR              = 38;
  public static final int DEF              = 39;
  public static final int TYPE             = 40;
  public static final int EXTENDS          = 41;
  public static final int TRUE             = 42;
  public static final int FALSE            = 43;
  public static final int OBJECT           = 44;
  public static final int CLASS            = 45;
  public static final int IMPORT           = 46;
  public static final int PACKAGE          = 47;
  public static final int YIELD            = 48;
  public static final int DO               = 49;
  public static final int TRAIT            = 50;
  public static final int SEALED           = 51;
  public static final int THROW            = 52;
  public static final int TRY              = 53;
  public static final int CATCH            = 54;
  public static final int FINALLY          = 55;
  public static final int WHILE            = 56;
  public static final int RETURN           = 57;
  public static final int MATCH            = 58;
  public static final int FORSOME          = 59;
  public static final int LAZY             = 61;
  public static final int MACRO            = 62;
  public static final int THEN             = 63;
  public static final int COMMA            = 70;
  public static final int SEMI             = 71;
  public static final int DOT              = 72;
  public static final int USCORE           = 73;
  public static final int COLON            = 74;
  public static final int EQUALS           = 75;
  public static final int LARROW           = 76;
  public static final int ARROW            = 77;
  public static final int NEWLINE          = 78;
  public static final int NEWLINES         = 79;
  public static final int SUBTYPE          = 80;
  public static final int SUPERTYPE        = 81;
  public static final int HASH             = 82;
  public static final int AT               = 83;
  public static final int VIEWBOUND        = 84;
  public static final int LPAREN           = 90;
  public static final int RPAREN           = 91;
  public static final int LBRACKET         = 92;
  public static final int RBRACKET         = 93;
  public static final int LBRACE           = 94;
  public static final int RBRACE           = 95;
  public static final int XMLSTART         = 96;
  public static final int COMMENT          = 97;
  public static final int WHITESPACE       = 105;

  public static boolean isDeprecatedIdent(String word) {
    switch (word) {
      case "macro": return true;
      case  "then": return true;
      default     : return false;
    }
  }

  public static String tokenToString(int token) {
    switch (token) {
      case         ABSTRACT:  return         "abstract";
      case            ARROW:  return               "=>";
      case               AT:  return                "@";
      case BACKQUOTED_IDENT:  return       "identifier";
      case             CASE:  return             "case";
      case        CASECLASS:  return       "case class";
      case       CASEOBJECT:  return      "case object";
      case            CATCH:  return            "catch";
      case          CHARLIT:  return     "char literal";
      case            CLASS:  return            "class";
      case            COLON:  return                ":";
      case            COMMA:  return                ",";
      case              DEF:  return              "def";
      case               DO:  return               "do";
      case              DOT:  return                ".";
      case        DOUBLELIT:  return   "double literal";
      case             ELSE:  return             "else";
      case              EOF:  return              "eof";
      case           EQUALS:  return                "=";
      case          EXTENDS:  return          "extends";
      case            FALSE:  return            "false";
      case            FINAL:  return            "final";
      case          FINALLY:  return          "finally";
      case         FLOATLIT:  return    "float literal";
      case              FOR:  return              "for";
      case          FORSOME:  return          "forSome";
      case             HASH:  return                "#";
      case       IDENTIFIER:  return       "identifier";
      case               IF:  return               "if";
      case         IMPLICIT:  return         "implicit";
      case           IMPORT:  return           "import";
      case  INTERPOLATIONID:  return   "string literal";
      case           INTLIT:  return  "integer literal";
      case           LARROW:  return               "<-";
      case             LAZY:  return             "lazy";
      case           LBRACE:  return                "{";
      case         LBRACKET:  return                "[";
      case          LONGLIT:  return     "long literal";
      case           LPAREN:  return                "(";
      case            MACRO:  return            "macro";
      case            MATCH:  return            "match";
      case              NEW:  return              "new";
      case          NEWLINE:  return                ";";
      case         NEWLINES:  return                ";";
      case             NULL:  return             "null";
      case           OBJECT:  return           "object";
      case         OVERRIDE:  return         "override";
      case          PACKAGE:  return          "package";
      case          PRIVATE:  return          "private";
      case        PROTECTED:  return        "protected";
      case           RBRACE:  return                "}";
      case         RBRACKET:  return                "]";
      case           RETURN:  return           "return";
      case           RPAREN:  return                ")";
      case           SEALED:  return           "sealed";
      case             SEMI:  return                ";";
      case        STRINGLIT:  return   "string literal";
      case       STRINGPART:  return   "string literal";
      case          SUBTYPE:  return               "<:";
      case            SUPER:  return            "super";
      case        SUPERTYPE:  return               ">:";
      case        SYMBOLLIT:  return   "symbol literal";
      case             THEN:  return             "then";
      case             THIS:  return             "this";
      case            THROW:  return            "throw";
      case            TRAIT:  return            "trait";
      case             TRUE:  return             "true";
      case              TRY:  return              "try";
      case             TYPE:  return             "type";
      case           USCORE:  return                "_";
      case              VAL:  return              "val";
      case              VAR:  return              "var";
      case        VIEWBOUND:  return               "<%";
      case            WHILE:  return            "while";
      case             WITH:  return             "with";
      case         XMLSTART:  return      "$XMLSTART$<";
      case            YIELD:  return            "yield";

      default              :  return String.format("'<%d>'", token);
    }
  }

  public static int scalaLookup(String word) {
    switch (word) {
      case      "abstract":  return ABSTRACT;
      case          "case":  return CASE;
      case         "catch":  return CATCH;
      case         "class":  return CLASS;
      case           "def":  return DEF;
      case            "do":  return DO;
      case          "else":  return ELSE;
      case       "extends":  return EXTENDS;
      case         "false":  return FALSE;
      case         "final":  return FINAL;
      case       "finally":  return FINALLY;
      case           "for":  return FOR;
      case       "forSome":  return FORSOME;
      case            "if":  return IF;
      case      "implicit":  return IMPLICIT;
      case        "import":  return IMPORT;
      case          "lazy":  return LAZY;
      case         "match":  return MATCH;
      case           "new":  return NEW;
      case          "null":  return NULL;
      case        "object":  return OBJECT;
      case      "override":  return OVERRIDE;
      case       "package":  return PACKAGE;
      case       "private":  return PRIVATE;
      case     "protected":  return PROTECTED;
      case        "return":  return RETURN;
      case        "sealed":  return SEALED;
      case         "super":  return SUPER;
      case          "this":  return THIS;
      case         "throw":  return THROW;
      case         "trait":  return TRAIT;
      case          "true":  return TRUE;
      case           "try":  return TRY;
      case          "type":  return TYPE;
      case           "val":  return VAL;
      case           "var":  return VAR;
      case         "while":  return WHILE;
      case          "with":  return WITH;
      case         "yield":  return YIELD;
      case             ".":  return DOT;
      case             "_":  return USCORE;
      case             ":":  return COLON;
      case             "=":  return EQUALS;
      case            "=>":  return ARROW;
      case            "<-":  return LARROW;
      case            "<:":  return SUBTYPE;
      case            "<%":  return VIEWBOUND;
      case            ">:":  return SUPERTYPE;
      case             "#":  return HASH;
      case             "@":  return AT;
      case         "macro":  return IDENTIFIER;
      case          "then":  return IDENTIFIER;

      default             :  return IDENTIFIER;
    }
  }
}
