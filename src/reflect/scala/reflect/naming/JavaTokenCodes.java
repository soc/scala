package scala.reflect.naming;

public final class JavaTokenCodes {
  public static final int IDENTIFIER   = 10;
  public static final int ABSTRACT     = 20;
  public static final int ASSERT       = 21;
  public static final int BOOLEAN      = 22;
  public static final int BREAK        = 23;
  public static final int BYTE         = 24;
  public static final int CASE         = 25;
  public static final int CATCH        = 26;
  public static final int CHAR         = 27;
  public static final int CLASS        = 28;
  public static final int CONST        = 29;
  public static final int CONTINUE     = 30;
  public static final int DEFAULT      = 31;
  public static final int DO           = 32;
  public static final int DOUBLE       = 33;
  public static final int ELSE         = 34;
  public static final int ENUM         = 35;
  public static final int EXTENDS      = 36;
  public static final int FINAL        = 37;
  public static final int FINALLY      = 38;
  public static final int FLOAT        = 39;
  public static final int FOR          = 40;
  public static final int IF           = 41;
  public static final int GOTO         = 42;
  public static final int IMPLEMENTS   = 43;
  public static final int IMPORT       = 44;
  public static final int INSTANCEOF   = 45;
  public static final int INT          = 46;
  public static final int INTERFACE    = 47;
  public static final int LONG         = 48;
  public static final int NATIVE       = 49;
  public static final int NEW          = 50;
  public static final int PACKAGE      = 51;
  public static final int PRIVATE      = 52;
  public static final int PROTECTED    = 53;
  public static final int PUBLIC       = 54;
  public static final int RETURN       = 55;
  public static final int SHORT        = 56;
  public static final int STATIC       = 57;
  public static final int STRICTFP     = 58;
  public static final int SUPER        = 59;
  public static final int SWITCH       = 60;
  public static final int SYNCHRONIZED = 61;
  public static final int THIS         = 62;
  public static final int THROW        = 63;
  public static final int THROWS       = 64;
  public static final int TRANSIENT    = 65;
  public static final int TRY          = 66;
  public static final int VOID         = 67;
  public static final int VOLATILE     = 68;
  public static final int WHILE        = 69;
  public static final int COMMA        = 70;
  public static final int SEMI         = 71;
  public static final int DOT          = 72;
  public static final int AT           = 73;
  public static final int COLON        = 74;
  public static final int ASSIGN       = 75;
  public static final int EQEQ         = 76;
  public static final int BANGEQ       = 77;
  public static final int LT           = 78;
  public static final int GT           = 79;
  public static final int LTEQ         = 80;
  public static final int GTEQ         = 81;
  public static final int BANG         = 82;
  public static final int QMARK        = 83;
  public static final int AMP          = 84;
  public static final int BAR          = 85;
  public static final int PLUS         = 86;
  public static final int MINUS        = 87;
  public static final int ASTERISK     = 88;
  public static final int SLASH        = 89;
  public static final int PERCENT      = 90;
  public static final int HAT          = 91;
  public static final int LTLT         = 92;
  public static final int GTGT         = 93;
  public static final int GTGTGT       = 94;
  public static final int AMPAMP       = 95;
  public static final int BARBAR       = 96;
  public static final int PLUSPLUS     = 97;
  public static final int MINUSMINUS   = 98;
  public static final int TILDE        = 99;
  public static final int DOTDOTDOT    = 100;
  public static final int AMPEQ        = 104;
  public static final int BAREQ        = 105;
  public static final int PLUSEQ       = 106;
  public static final int MINUSEQ      = 107;
  public static final int ASTERISKEQ   = 1010;
  public static final int SLASHEQ      = 109;
  public static final int PERCENTEQ    = 110;
  public static final int HATEQ        = 111;
  public static final int LTLTEQ       = 112;
  public static final int GTGTEQ       = 113;
  public static final int GTGTGTEQ     = 114;
  public static final int LPAREN       = 115;
  public static final int RPAREN       = 116;
  public static final int LBRACKET     = 117;
  public static final int RBRACKET     = 118;
  public static final int LBRACE       = 119;
  public static final int RBRACE       = 120;

  public static String tokenToString(int token) {
    switch (token) {
      case         ABSTRACT:  return         "abstract";
      case              AMP:  return                "&";
      case           AMPAMP:  return               "&&";
      case            AMPEQ:  return               "&=";
      case           ASSERT:  return           "assert";
      case           ASSIGN:  return           "assign";
      case         ASTERISK:  return                "*";
      case       ASTERISKEQ:  return               "*=";
      case               AT:  return                "@";
      case             BANG:  return                "!";
      case           BANGEQ:  return               "!=";
      case              BAR:  return                "|";
      case           BARBAR:  return               "||";
      case            BAREQ:  return               "|=";
      case          BOOLEAN:  return          "boolean";
      case            BREAK:  return            "break";
      case             BYTE:  return             "byte";
      case             CASE:  return             "case";
      case            CATCH:  return            "catch";
      case             CHAR:  return             "char";
      case            CLASS:  return            "class";
      case            COLON:  return                ":";
      case            COMMA:  return                ",";
      case            CONST:  return            "const";
      case         CONTINUE:  return         "continue";
      case          DEFAULT:  return          "default";
      case               DO:  return               "do";
      case              DOT:  return                ".";
      case        DOTDOTDOT:  return              "...";
      case           DOUBLE:  return           "double";
      case             ELSE:  return             "else";
      case             ENUM:  return             "enum";
      case             EQEQ:  return               "==";
      case          EXTENDS:  return          "extends";
      case            FINAL:  return            "final";
      case          FINALLY:  return          "finally";
      case            FLOAT:  return            "float";
      case              FOR:  return              "for";
      case             GOTO:  return             "goto";
      case               GT:  return                ">";
      case             GTEQ:  return               ">=";
      case             GTGT:  return               ">>";
      case           GTGTEQ:  return              ">>=";
      case           GTGTGT:  return              ">>>";
      case         GTGTGTEQ:  return             ">>>=";
      case              HAT:  return                "^";
      case            HATEQ:  return               "^=";
      case       IDENTIFIER:  return       "identifier";
      case               IF:  return               "if";
      case       IMPLEMENTS:  return       "implements";
      case           IMPORT:  return           "import";
      case       INSTANCEOF:  return       "instanceof";
      case              INT:  return              "int";
      case        INTERFACE:  return        "interface";
      case           LBRACE:  return                "{";
      case         LBRACKET:  return                "[";
      case             LONG:  return             "long";
      case           LPAREN:  return                "(";
      case               LT:  return                "<";
      case             LTEQ:  return             "<=";
      case             LTLT:  return             "<<";
      case           LTLTEQ:  return           "<<=";
      case            MINUS:  return            "-";
      case          MINUSEQ:  return          "-=";
      case       MINUSMINUS:  return       "--";
      case           NATIVE:  return           "native";
      case              NEW:  return              "new";
      case          PACKAGE:  return          "package";
      case          PERCENT:  return          "%";
      case        PERCENTEQ:  return        "%=";
      case             PLUS:  return             "+";
      case           PLUSEQ:  return           "+=";
      case         PLUSPLUS:  return         "++";
      case          PRIVATE:  return          "private";
      case        PROTECTED:  return        "protected";
      case           PUBLIC:  return           "public";
      case            QMARK:  return            "?";
      case           RBRACE:  return           "}";
      case         RBRACKET:  return         "]";
      case           RETURN:  return           "return";
      case           RPAREN:  return           ")";
      case             SEMI:  return             ";";
      case            SHORT:  return            "short";
      case            SLASH:  return            "/";
      case          SLASHEQ:  return          "/=";
      case           STATIC:  return           "static";
      case         STRICTFP:  return         "strictfp";
      case            SUPER:  return            "super";
      case           SWITCH:  return           "switch";
      case     SYNCHRONIZED:  return     "synchronized";
      case             THIS:  return             "this";
      case            THROW:  return            "throw";
      case           THROWS:  return           "throws";
      case            TILDE:  return            "~";
      case        TRANSIENT:  return        "transient";
      case              TRY:  return              "try";
      case             VOID:  return             "void";
      case         VOLATILE:  return         "volatile";
      case            WHILE:  return            "while";

      default              :  return "<" + token + ">";
    }
  }

  public static int javaLookup(String word) {
    switch(word) {
      case      "abstract":  return ABSTRACT;
      case        "assert":  return ASSERT;
      case       "boolean":  return BOOLEAN;
      case         "break":  return BREAK;
      case          "byte":  return BYTE;
      case          "case":  return CASE;
      case         "catch":  return CATCH;
      case          "char":  return CHAR;
      case         "class":  return CLASS;
      case         "const":  return CONST;
      case      "continue":  return CONTINUE;
      case       "default":  return DEFAULT;
      case            "do":  return DO;
      case        "double":  return DOUBLE;
      case          "else":  return ELSE;
      case          "enum":  return ENUM;
      case       "extends":  return EXTENDS;
      case         "final":  return FINAL;
      case       "finally":  return FINALLY;
      case         "float":  return FLOAT;
      case           "for":  return FOR;
      case          "goto":  return GOTO;
      case            "if":  return IF;
      case    "implements":  return IMPLEMENTS;
      case        "import":  return IMPORT;
      case    "instanceof":  return INSTANCEOF;
      case           "int":  return INT;
      case     "interface":  return INTERFACE;
      case          "long":  return LONG;
      case        "native":  return NATIVE;
      case           "new":  return NEW;
      case       "package":  return PACKAGE;
      case       "private":  return PRIVATE;
      case     "protected":  return PROTECTED;
      case        "public":  return PUBLIC;
      case        "return":  return RETURN;
      case         "short":  return SHORT;
      case        "static":  return STATIC;
      case      "strictfp":  return STRICTFP;
      case         "super":  return SUPER;
      case        "switch":  return SWITCH;
      case  "synchronized":  return SYNCHRONIZED;
      case          "this":  return THIS;
      case         "throw":  return THROW;
      case        "throws":  return THROWS;
      case     "transient":  return TRANSIENT;
      case           "try":  return TRY;
      case          "void":  return VOID;
      case      "volatile":  return VOLATILE;
      case         "while":  return WHILE;

      default             :  return IDENTIFIER;
    }
  }
}
